# sep: 값 사이의 구분 기호 기본값 ''
print("Hello", "World")

print("Hello", "World", sep = "->")

# %s, 문자열(String). %c, 문자 1개(character). %d, 정수(Integer). %f, 부동소수(floating-point). %o, 8진수. %x, 16진수

# 유니코드 
# ord() 문자를 유니코드로 변경

# 16진수 값 
# n = int(input(), 16)

# 소수점 n(자연수)번째 자리까지 나타내기
# format(f, ".nf")

#최소공배수
# a, b, c = map(int, input().split())
# d = 1
# while d%a!=0 or d%b!=0 or d%c!=0:
#     d += 1
# print(d)

# 리스트 정렬 기준
# _.sort(key=lambda x: (x[n],x[n1],x[n2]....))

# 리스트형태로 가져오기
# list(map(int, input().split()))

# 파이썬 인덱스
# list.index()
# ex list=[100,200,300]
# list.index(100)
# >>> 0
# 문자열도 가능

##########################################################################################################################################################################
# 문법 스킬

# a.input().split()
# for i in a.split()
# split하면서 가져올 수 있음
# 계산식의 최소값 구하기
# ex) a=30+40-50+30-20

# a=input().split("-")

# for i in a[0].split('+'):
#   sum += int(i)

# for i in a[1:]:
#   for j in i.split('+'):
#     sum -= int(j)

# print(sum) 


# DFS(깊이 우선 탐색)
# from collections import deque

# def DFS(graph, root):
#     visited = []
#     stack = [root]

#     while stack:
#         n = stack.pop()
#         if n not in visited:
#             visited.append(n)
#             if n in graph:
#                 temp = list(set(graph[n]) - set(visited))
#                 temp.sort(reverse=True)
#                 stack += temp
#     return " ".join(str(i) for i in visited)

# BFS(너비 우선 탐색)
# def BFS(graph, root):
#     visited = []
#     queue = deque([root])

#     while queue:
#         n = queue.popleft()
#         if n not in visited:
#             visited.append(n)
#             if n in graph:
#                 temp = list(set(graph[n]) - set(visited))
#                 temp.sort()
#                 queue += temp
#     return " ".join(str(i) for i in visited)

# graph = {}
# n = input().split(' ')
# node, edge, start = [int(i) for i in n]
# for i in range(edge):
#     edge_info = input().split(' ')
#     n1, n2 = [int(j) for j in edge_info]
#     if n1 not in graph:
#         graph[n1] = [n2]
#     elif n2 not in graph[n1]:
#         graph[n1].append(n2)

#     if n2 not in graph:
#         graph[n2] = [n1]
#     elif n1 not in graph[n2]:
#         graph[n2].append(n1)

# print(DFS(graph, start))
# print(BFS(graph, start))

